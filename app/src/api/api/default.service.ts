/**
 * MySwaggerDoc
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core'
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http'
import { CustomHttpUrlEncodingCodec } from '../encoder'

import { Observable } from 'rxjs/Observable'

import { AuthorizeInput } from '../model/authorizeInput'
import { CreateCategoryInput } from '../model/createCategoryInput'
import { CreatePostInput } from '../model/createPostInput'
import { CreateReplyInput } from '../model/createReplyInput'
import { GetPostsInput } from '../model/getPostsInput'
import { GetRepliesInput } from '../model/getRepliesInput'
import { GetUserPostsInput } from '../model/getUserPostsInput'
import { GetUsersInput } from '../model/getUsersInput'
import { SignUpInput } from '../model/signUpInput'

import { BASE_PATH, COLLECTION_FORMATS } from '../variables'
import { Configuration } from '../configuration'

@Injectable()
export class DefaultService {
  protected basePath = 'https://forum-api.lecom.cloud'
  public defaultHeaders = new HttpHeaders()
  public configuration = new Configuration()

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration,
  ) {
    if (basePath) {
      this.basePath = basePath
    }
    if (configuration) {
      this.configuration = configuration
      this.basePath = basePath || configuration.basePath || this.basePath
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data'
    for (const consume of consumes) {
      if (form === consume) {
        return true
      }
    }
    return false
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public categorycreateCategoryPost(
    body: CreateCategoryInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public categorycreateCategoryPost(
    body: CreateCategoryInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public categorycreateCategoryPost(
    body: CreateCategoryInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public categorycreateCategoryPost(
    body: CreateCategoryInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling categorycreateCategoryPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(
      `${this.basePath}/category/createCategory`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    )
  }

  /**
   *
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public categorygetCategoriesPost(
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public categorygetCategoriesPost(
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public categorygetCategoriesPost(
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public categorygetCategoriesPost(
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']

    return this.httpClient.post<any>(
      `${this.basePath}/category/getCategories`,
      null,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    )
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postcreatePostPost(
    body: CreatePostInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public postcreatePostPost(
    body: CreatePostInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public postcreatePostPost(
    body: CreatePostInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public postcreatePostPost(
    body: CreatePostInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling postcreatePostPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(`${this.basePath}/post/createPost`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    })
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postgetPostsPost(
    body: GetPostsInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public postgetPostsPost(
    body: GetPostsInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public postgetPostsPost(
    body: GetPostsInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public postgetPostsPost(
    body: GetPostsInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling postgetPostsPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(`${this.basePath}/post/getPosts`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    })
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postgetUserPostsPost(
    body: GetUserPostsInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public postgetUserPostsPost(
    body: GetUserPostsInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public postgetUserPostsPost(
    body: GetUserPostsInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public postgetUserPostsPost(
    body: GetUserPostsInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling postgetUserPostsPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(
      `${this.basePath}/post/getUserPosts`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    )
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public replycreateReplyPost(
    body: CreateReplyInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public replycreateReplyPost(
    body: CreateReplyInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public replycreateReplyPost(
    body: CreateReplyInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public replycreateReplyPost(
    body: CreateReplyInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling replycreateReplyPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(
      `${this.basePath}/reply/createReply`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    )
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public replygetRepliesPost(
    body: GetRepliesInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public replygetRepliesPost(
    body: GetRepliesInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public replygetRepliesPost(
    body: GetRepliesInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public replygetRepliesPost(
    body: GetRepliesInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling replygetRepliesPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(
      `${this.basePath}/reply/getReplies`,
      body,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      },
    )
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userauthorizePost(
    body: AuthorizeInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public userauthorizePost(
    body: AuthorizeInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public userauthorizePost(
    body: AuthorizeInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public userauthorizePost(
    body: AuthorizeInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling userauthorizePost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(`${this.basePath}/user/authorize`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    })
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public usergetUsersPost(
    body: GetUsersInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public usergetUsersPost(
    body: GetUsersInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public usergetUsersPost(
    body: GetUsersInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public usergetUsersPost(
    body: GetUsersInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling usergetUsersPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(`${this.basePath}/user/getUsers`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    })
  }

  /**
   *
   *
   * @param body
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public usersignUpPost(
    body: SignUpInput,
    observe?: 'body',
    reportProgress?: boolean,
  ): Observable<any>
  public usersignUpPost(
    body: SignUpInput,
    observe?: 'response',
    reportProgress?: boolean,
  ): Observable<HttpResponse<any>>
  public usersignUpPost(
    body: SignUpInput,
    observe?: 'events',
    reportProgress?: boolean,
  ): Observable<HttpEvent<any>>
  public usersignUpPost(
    body: SignUpInput,
    observe: any = 'body',
    reportProgress: boolean = false,
  ): Observable<any> {
    if (body === null || body === undefined) {
      throw new Error(
        'Required parameter body was null or undefined when calling usersignUpPost.',
      )
    }

    let headers = this.defaultHeaders

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json']
    const httpHeaderAcceptSelected:
      | string
      | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts)
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected)
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json']
    const httpContentTypeSelected:
      | string
      | undefined = this.configuration.selectHeaderContentType(consumes)
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected)
    }

    return this.httpClient.post<any>(`${this.basePath}/user/signUp`, body, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    })
  }
}
